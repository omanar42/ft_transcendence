// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoomType {
  PUBLIC
  PRIVATE
  PROTECTED
  DIRECT_MESSAGE
}

enum UserStatusInRoom {
  OWNER
  ADMIN
  MEMBER
  DM
  BANNED
}

enum Status {
  ONLINE
  OFFLINE
  INGAME
}

enum FriendStatus {
  FRIENDS
  PENDING
  BLOCKED
}

enum FriendActions {
  ADD
  REMOVE
  ACCEPT
  REJECT
  REVOKE
  BLOCK
  UNBLOCK
}

model User {
  oauthId   String     @unique
  username  String     @unique
  fullname  String
  email     String     @unique
  avatar    String?
  provider  String
  hashedRt  String?
  twoFactor Boolean    @default(false)
  twoFaSec  String?
  status    Status     @default(OFFLINE)
  friends   Friend[]
  stats     Stats?
  matches   Match[]
  rooms     Room[]
  roomsuser RoomUser[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Room {
  id         Int        @id @unique @default(autoincrement())
  avatar     String?
  name       String
  owner      User       @relation(fields: [ownerId], references: [oauthId])
  ownerId    String
  type       RoomType   @default(PUBLIC)
  hashedPass String?
  messages   Message[]
  roomuser   RoomUser[]
  createdAt  DateTime   @default(now())
}

model RoomUser {
  id     Int              @id @default(autoincrement())
  userId String
  roomId Int
  status UserStatusInRoom @default(MEMBER)
  // Muted     Boolean  @default(false)
  user   User             @relation(fields: [userId], references: [oauthId])
  room   Room             @relation(fields: [roomId], references: [id])

  // @@unique([userId, roomId])
}

model Message {
  id        Int      @id @default(autoincrement())
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  content   String
  createdAt DateTime @default(now())
}

model Match {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [oauthId])
  userId        String
  userScore     Int
  opponentScore Int
  win           Boolean
  xpGain        Int
  opponentUser  String
  createdAt     DateTime @default(now())
}

model Friend {
  id       Int             @id @default(autoincrement())
  user     User            @relation(fields: [userId], references: [oauthId])
  userId   String
  friendId String
  status   FriendStatus
  actions  FriendActions[]
}

model Stats {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [oauthId])
  userId       String   @unique
  wins         Int      @default(0)
  losses       Int      @default(0)
  level        Float    @default(0)
  achievements String[]
}

enum AchievementName {
  LEVEL_10
  LEVEL_50
  LEVEL_100
  WIN_1_GAMES
  WIN_5_GAMES
  WIN_10_GAMES
  FIRST_WIN
  FIRST_LOSE
  PERFECT_WIN
}
